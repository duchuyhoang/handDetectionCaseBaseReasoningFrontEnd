{"version":3,"sources":["shared/component/Pagination/Pagination.js","shared/component/ErrorScreen/ErrorScreen.js","components/pages/ListHandCase/ListHandCase.js"],"names":["GoToPageToolTip","onChange","item","currentPage","useState","isActive","setIsActive","selectedPage","setSelectedPage","onClick","prev","className","type","e","stopPropagation","target","value","Pagination","itemPerPage","totalRecord","page","boundaryCount","siblingCount","count","useMemo","Math","ceil","range","start","end","length","Array","from","_","i","startPages","min","endPages","max","siblingsStart","siblingsEnd","itemList","map","renderItem","ErrorScreen","message","GlobalFilter","preGlobalFilteredRows","globalFilter","setGlobalFilter","React","setValue","useAsyncDebounce","undefined","name","style","fill","position","top","width","height","placeholder","fontSize","border","ListHandCase","props","dispatch","useDispatch","listCase","useSelector","state","case","loading","data","_case","idCase","caseNameResult","directionOfPalmAndFingerName","_directionOfPalmsAndFinger","nameFingerOpening","_fingerOpening","nameFingerShape","_fingerShape","nameHandMovement","_handMovement","nameHandShape","_handShape","columns","Header","accessor","useTable","initialState","pageSize","pageIndex","useFilters","useGlobalFilter","usePagination","getTableProps","getTableBodyProps","headerGroups","rows","prepareRow","gotoPage","pageCount","useEffect","ACTIONS","FETCH_LIST_CASE_START","Loading","headerGroup","getHeaderGroupProps","headers","column","getHeaderProps","render","row","getRowProps","cells","cell","getCellProps"],"mappings":"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","file":"static/js/5.d5c1bb68.chunk.js","sourcesContent":["import { useMemo, useState } from \"react\";\r\nimport \"./Pagination.css\";\r\n\r\nconst GoToPageToolTip = ({ onChange, currentPage,item }) => {\r\n  const [isActive, setIsActive] = useState(false);\r\n  const [selectedPage, setSelectedPage] = useState(false);\r\n  return (\r\n    <li\r\n    key={\"pagi_\"+item}\r\n      onClick={() => {\r\n        setIsActive((prev) => !prev);\r\n      }}\r\n    >\r\n      ...\r\n      <div\r\n        className={`paginationToolTip ${\r\n          isActive ? \"paginationToolTipActive\" : \"\"\r\n        }`}\r\n      >\r\n        Go to page:\r\n        <input\r\n          type=\"number\"\r\n          className=\"paginationSearchBox\"\r\n          onClick={(e) => {\r\n            e.stopPropagation();\r\n          }}\r\n          onChange={(e) => {\r\n            setSelectedPage(e.target.value-1);\r\n          }}\r\n        />\r\n        <button\r\n          className=\"goPagnationButton\"\r\n          onClick={() => {\r\n            if (onChange) onChange(selectedPage);\r\n          }}\r\n        >\r\n          Go\r\n        </button>\r\n      </div>\r\n    </li>\r\n  );\r\n};\r\n\r\nexport const Pagination = ({\r\n  itemPerPage,\r\n  totalRecord,\r\n  page,\r\n  boundaryCount = 1,\r\n  siblingCount = 1,\r\n  onChange,\r\n}) => {\r\n  const count = useMemo(() => Math.ceil(totalRecord / itemPerPage));\r\n\r\n  const range = (start, end) => {\r\n    const length = end - start + 1;\r\n    return Array.from({ length }, (_, i) => start + i);\r\n  };\r\n\r\n  const startPages = range(1, Math.min(boundaryCount, count));\r\n  const endPages = range(\r\n    Math.max(count - boundaryCount + 1, boundaryCount + 1),\r\n    count\r\n  );\r\n\r\n  const siblingsStart = Math.max(\r\n    Math.min(\r\n      // Natural start\r\n      page - siblingCount,\r\n      // Lower boundary when page is high\r\n      count - boundaryCount - siblingCount * 2 - 1\r\n    ),\r\n    // Greater than startPages\r\n    boundaryCount + 2\r\n  );\r\n\r\n  const siblingsEnd = Math.min(\r\n    Math.max(\r\n      // Natural end\r\n      page + siblingCount,\r\n      // Upper boundary when page is low\r\n      boundaryCount + siblingCount * 2 + 2\r\n    ),\r\n    // Less than endPages\r\n    endPages[0] - 2\r\n  );\r\n\r\n  const itemList = [\r\n    ...startPages,\r\n    ...(siblingsStart > boundaryCount + 2\r\n      ? [\"startEllipsis\"]\r\n      : boundaryCount + 1 < count - boundaryCount\r\n      ? [boundaryCount + 1]\r\n      : []),\r\n    ...range(siblingsStart, siblingsEnd),\r\n    ...(siblingsEnd < count - boundaryCount - 1\r\n      ? [\"endEllipsis\"]\r\n      : count - boundaryCount > boundaryCount\r\n      ? [count - boundaryCount]\r\n      : []),\r\n\r\n    ...endPages,\r\n  ];\r\n\r\n  const renderItem = (item) => {\r\n    if (item === \"startEllipsis\" || item === \"endEllipsis\")\r\n      return (\r\n        <>\r\n          <GoToPageToolTip onChange={onChange} item={item}/>\r\n        </>\r\n      );\r\n    else\r\n      return (\r\n        <li\r\n        key={\"pagi_\"+item}\r\n          className={`${page + 1 === item ? \"activePage\" : \"\"}`}\r\n          onClick={() => {\r\n            if (onChange) onChange(item - 1);\r\n          }}\r\n        >\r\n          {item}\r\n        </li>\r\n      );\r\n  };\r\n\r\n  return (\r\n    <div className=\"paginationContainer\">\r\n      <ul>{itemList.map((item) => renderItem(item))}</ul>\r\n    </div>\r\n  );\r\n};\r\n","export const ErrorScreen = ({ message }) => {\r\n  return (\r\n    <div className=\"errorScreenContainer\">\r\n      <h2 className=\"errorMessage\">{message || \"Something wrong\"}</h2>\r\n    </div>\r\n  );\r\n};\r\n","import {\r\n  useTable,\r\n  useAsyncDebounce,\r\n  useGlobalFilter,\r\n  useFilters,\r\n  usePagination,\r\n} from \"react-table\";\r\nimport React, { useEffect } from \"react\";\r\nimport { SVGIcon } from \"../../../shared/component/SvgIcon\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport \"./ListHandCase.css\";\r\nimport { ACTIONS } from \"../../../redux/actions/caseActions\";\r\nimport { Pagination } from \"../../../shared/component/Pagination/Pagination\";\r\nimport { Loading } from \"../../../shared/component/Loading/Loading\";\r\nimport { ErrorScreen } from \"../../../shared/component/ErrorScreen/ErrorScreen\";\r\nfunction GlobalFilter({\r\n  preGlobalFilteredRows,\r\n  globalFilter,\r\n  setGlobalFilter,\r\n}) {\r\n  const count = preGlobalFilteredRows.length;\r\n  const [value, setValue] = React.useState(globalFilter);\r\n  const onChange = useAsyncDebounce((value) => {\r\n    setGlobalFilter(value || undefined);\r\n  }, 200);\r\n\r\n  return (\r\n    <div className=\"globalInputFilterWrapper\">\r\n      <SVGIcon\r\n        name=\"magnifying\"\r\n        style={{ fill: \"#a0a5b1\", position: \"absolute\", top: 7 }}\r\n        width={20}\r\n        height={20}\r\n      />\r\n      <input\r\n        value={value || \"\"}\r\n        className=\"globalInputFilter\"\r\n        onChange={(e) => {\r\n          setValue(e.target.value);\r\n          onChange(e.target.value);\r\n        }}\r\n        placeholder={\"Search...\"}\r\n        style={{\r\n          fontSize: \"1.1rem\",\r\n          border: \"0\",\r\n        }}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\nconst ListHandCase = (props) => {\r\n  const dispatch = useDispatch();\r\n\r\n  const listCase = useSelector((state) => state.case.listCase);\r\n  const loading = useSelector((state) => state.case.loading);\r\n  const data = React.useMemo(\r\n    () =>\r\n      listCase.map((_case) => ({\r\n        idCase: _case.idCase,\r\n        caseNameResult: _case.caseNameResult,\r\n        directionOfPalmAndFingerName:\r\n          _case._directionOfPalmsAndFinger?.directionOfPalmAndFingerName ||\r\n          \"Không\",\r\n        nameFingerOpening: _case._fingerOpening?.nameFingerOpening || \"Không\",\r\n        nameFingerShape: _case._fingerShape?.nameFingerShape || \"Không\",\r\n        nameHandMovement: _case._handMovement?.nameHandMovement || \"Không\",\r\n        nameHandShape: _case._handShape?.nameHandShape || \"Không\",\r\n      })),\r\n\r\n    [listCase]\r\n  );\r\n\r\n  const columns = React.useMemo(\r\n    () => [\r\n      // {\r\n      //   Header: \"Id\",\r\n      //   accessor: \"idCase\",\r\n      // },\r\n      {\r\n        Header: \"Kí tự\",\r\n        accessor: \"caseNameResult\",\r\n      },\r\n      {\r\n        Header: \"Hướng của lòng bàn tay và ngón tay\",\r\n        accessor: \"directionOfPalmAndFingerName\",\r\n      },\r\n      {\r\n        Header: \"Độ mở ngón tay\",\r\n        accessor: \"nameFingerOpening\",\r\n      },\r\n      {\r\n        Header: \"Hình dạng ngón tay\",\r\n        accessor: \"nameFingerShape\",\r\n      },\r\n      {\r\n        Header: \"Độ dịch chuyển bàn tay\",\r\n        accessor: \"nameHandMovement\",\r\n      },\r\n      {\r\n        Header: \"Hình dạng bàn tay\",\r\n        accessor: \"nameHandShape\",\r\n      },\r\n    ],\r\n    []\r\n  );\r\n  const {\r\n    getTableProps,\r\n    getTableBodyProps,\r\n    headerGroups,\r\n    rows,\r\n    state,\r\n    prepareRow,\r\n    page,\r\n    setGlobalFilter,\r\n    preGlobalFilteredRows,\r\n    pageCount,\r\n    gotoPage,\r\n    state: { pageIndex, pageSize },\r\n  } = useTable(\r\n    { columns, data, initialState: { pageSize: 8, pageIndex: 0 } },\r\n    useFilters,\r\n    useGlobalFilter,\r\n    usePagination\r\n  );\r\n  useEffect(() => {\r\n    dispatch({ type: ACTIONS.FETCH_LIST_CASE_START });\r\n  }, []);\r\n\r\n  if (loading === \"idle\" || loading === \"loading\") return <Loading />;\r\n\r\n  if (loading === \"failed\") return <ErrorScreen />;\r\n\r\n  return (\r\n    <section className=\"listHandCaseContainer\">\r\n      <div className=\"searchContainer\">\r\n        <h2>Danh sách case</h2>\r\n\r\n        <div>\r\n          <GlobalFilter\r\n            preGlobalFilteredRows={preGlobalFilteredRows}\r\n            globalFilter={state.globalFilter}\r\n            setGlobalFilter={setGlobalFilter}\r\n          />\r\n        </div>\r\n      </div>\r\n      <div className=\"wrapTable\">\r\n        <table {...getTableProps()} className=\"listCaseTable\">\r\n          <thead className=\"listCaseTableHead\">\r\n            {headerGroups.map((headerGroup) => (\r\n              <tr {...headerGroup.getHeaderGroupProps()}>\r\n                {headerGroup.headers.map((column) => (\r\n                  <th {...column.getHeaderProps()}>\r\n                    {column.render(\"Header\")}\r\n                  </th>\r\n                ))}\r\n              </tr>\r\n            ))}\r\n          </thead>\r\n          <tbody {...getTableBodyProps()}>\r\n            {page.map((row, i) => {\r\n              prepareRow(row);\r\n              return (\r\n                <tr {...row.getRowProps()}>\r\n                  {row.cells.map((cell) => {\r\n                    return (\r\n                      <td {...cell.getCellProps()}>{cell.render(\"Cell\")}</td>\r\n                    );\r\n                  })}\r\n                </tr>\r\n              );\r\n            })}\r\n          </tbody>\r\n        </table>\r\n      </div>\r\n      <Pagination\r\n        itemPerPage={pageSize}\r\n        totalRecord={rows.length}\r\n        siblingCount={0}\r\n        boundaryCount={1}\r\n        page={pageIndex}\r\n        onChange={gotoPage}\r\n      />\r\n    </section>\r\n  );\r\n};\r\nexport default ListHandCase;\r\n"],"sourceRoot":""}