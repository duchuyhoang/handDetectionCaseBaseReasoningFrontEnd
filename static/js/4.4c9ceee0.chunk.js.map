{"version":3,"sources":["shared/component/Modal/Modal.js","components/pages/DetectHand/DetectHand.js"],"names":["Modal","children","isShow","setIsShow","onClose","modalRef","useRef","backdropRef","useEffect","current","addEventListener","e","console","log","target","contains","document","body","style","overflow","removeEventListener","ReactDOM","createPortal","className","ref","getElementById","customStyle","indicatorSeparator","provided","state","display","DetectHand","dispatch","useDispatch","useState","isShowModal","setIsShowModal","selectedDirectionOfPalmAndFinger","setSelectedDirectionOfPalmAndFinger","handleCloseModal","type","ACTIONS","CLEAR_DETECT_HAND_RESULT","selectedFingerOpening","setSelectedFingerOpening","selectedFingerShape","setSelectedFingerShape","selectedHandMovement","setSelectedHandMovement","selectedHandShape","setSelectedHandShape","errorNotSelectAll","setErrorNotSelectAll","listDirectionOfPalmAndFinger","useSelector","handDetect","listFingerOpening","listFingerShape","listHandMovement","listHandShape","loadingState","loading","returnResult","useLayoutEffect","FETCH_DATA_START","payload","message","Loading","styles","options","map","_value","value","idHandShape","label","nameHandShape","onChange","v","idDirectionOfPalmsAndFinger","directionOfPalmAndFingerName","idFingerOpening","nameFingerOpening","idFingerShape","nameFingerShape","idHandMovement","nameHandMovement","onClick","DETECT_HAND_START","data","directionOfPalmAndFinger","fingerOpening","fingerShape","handMovement","handShape","textAlign","name","width","cursor","fontWeight","case","caseNameResult","marginTop"],"mappings":"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","file":"static/js/4.4c9ceee0.chunk.js","sourcesContent":["import React, { useState, useRef, useEffect } from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./Modal.css\";\r\nexport default function Modal({ children, isShow, setIsShow,onClose }) {\r\n  const modalRef = useRef(null);\r\n  const backdropRef = useRef(null);\r\n\r\n  useEffect(() => {\r\n    if (isShow) {\r\n        backdropRef.current.addEventListener(\"click\", function (e) {\r\n        console.log(e.target);\r\n        if (!modalRef.current.contains(e.target)) {\r\n          if (setIsShow) {\r\n            setIsShow(false);\r\n          }\r\n          if(onClose){\r\n            onClose();\r\n          }\r\n        }\r\n      });\r\n    }\r\n\r\n    document.body.style.overflow = `${!isShow ? \"auto\" : \"hidden\"}`;\r\n    return ()=>{\r\n        if(backdropRef.current)\r\n        backdropRef.current.removeEventListener(\"click\",()=>{})\r\n    }\r\n  }, [isShow]);\r\n\r\n  return ReactDOM.createPortal(\r\n    <div className={`backdrop ${isShow ? \"backdrop\" : \"backdropHide\"}`} ref={backdropRef}>\r\n      <div\r\n        ref={modalRef}\r\n        className={`modal ${isShow ? \"modal-show\" : \"modal-hide\"}`}\r\n      >\r\n        {children}\r\n      </div>\r\n    </div>,\r\n    document.getElementById(\"modal\")\r\n  );\r\n}\r\n","import \"./DetectHand.css\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\n// import { ACTIONS } from \"../../redux/actions/directionOfPalmAndFingerActions\";\r\nimport { ACTIONS } from \"../../../redux/actions/detectHandActions\";\r\nimport Select from \"react-select\";\r\nimport { useEffect, useLayoutEffect, useState } from \"react\";\r\nimport { Loading } from \"../../../shared/component/Loading/Loading\";\r\nimport Modal from \"../../../shared/component/Modal/Modal\";\r\nimport { SVGIcon } from \"../../../shared/component/SvgIcon\";\r\n\r\nconst customStyle = {\r\n  indicatorSeparator: (provided, state) => {\r\n    return {\r\n      display: \"none!important\",\r\n    };\r\n  },\r\n};\r\n\r\nfunction DetectHand() {\r\n  const dispatch = useDispatch();\r\n  const [isShowModal, setIsShowModal] = useState(false);\r\n  const [\r\n    selectedDirectionOfPalmAndFinger,\r\n    setSelectedDirectionOfPalmAndFinger,\r\n  ] = useState(null);\r\n\r\n  const handleCloseModal = () => {\r\n    setIsShowModal(false);\r\n    dispatch({ type: ACTIONS.CLEAR_DETECT_HAND_RESULT });\r\n  };\r\n  // const [returnCharacter, setReturnCharacter] = useState(\"\");\r\n\r\n  const [selectedFingerOpening, setSelectedFingerOpening] = useState(null);\r\n  const [selectedFingerShape, setSelectedFingerShape] = useState(null);\r\n  const [selectedHandMovement, setSelectedHandMovement] = useState(null);\r\n  const [selectedHandShape, setSelectedHandShape] = useState(null);\r\n  const [errorNotSelectAll, setErrorNotSelectAll] = useState(false);\r\n\r\n  const listDirectionOfPalmAndFinger = useSelector(\r\n    (state) => state.handDetect.listDirectionOfPalmAndFinger\r\n  );\r\n  const listFingerOpening = useSelector(\r\n    (state) => state.handDetect.listFingerOpening\r\n  );\r\n  const listFingerShape = useSelector(\r\n    (state) => state.handDetect.listFingerShape\r\n  );\r\n  const listHandMovement = useSelector(\r\n    (state) => state.handDetect.listHandMovement\r\n  );\r\n  const listHandShape = useSelector((state) => state.handDetect.listHandShape);\r\n  const loadingState = useSelector((state) => state.handDetect.loading);\r\n  const returnResult = useSelector((state) => state.handDetect.returnResult);\r\n  useLayoutEffect(() => {\r\n    if (returnResult) setIsShowModal(true);\r\n    return () => {};\r\n  }, [returnResult]);\r\n  useEffect(() => {\r\n    dispatch({\r\n      type: ACTIONS.FETCH_DATA_START,\r\n      payload: { message: \"Hello world\" },\r\n    });\r\n  }, []);\r\n\r\n  if (loadingState === \"idle\" || loadingState === \"loading\") return <Loading />;\r\n\r\n  return (\r\n    <>\r\n      <div className=\"container\">\r\n        <div className=\"form\">\r\n          <div className=\"selectContainer\">\r\n            <span>Hình dạng bàn tay</span>\r\n            <Select\r\n              styles={customStyle}\r\n              options={listHandShape.map((_value) => ({\r\n                value: _value.idHandShape,\r\n                label: _value.nameHandShape,\r\n              }))}\r\n              value={selectedHandShape}\r\n              onChange={(v) => {\r\n                setSelectedHandShape(v);\r\n              }}\r\n            />\r\n          </div>\r\n\r\n          <div className=\"selectContainer\">\r\n            <span>Hướng của lòng bàn tay và ngón tay</span>\r\n            <Select\r\n              styles={customStyle}\r\n              options={listDirectionOfPalmAndFinger.map((_value) => ({\r\n                value: _value.idDirectionOfPalmsAndFinger,\r\n                label: _value.directionOfPalmAndFingerName,\r\n              }))}\r\n              value={selectedDirectionOfPalmAndFinger}\r\n              onChange={(v) => {\r\n                setSelectedDirectionOfPalmAndFinger(v);\r\n                console.log(v);\r\n              }}\r\n            />\r\n          </div>\r\n          <div className=\"selectContainer\">\r\n            <span>Độ mở các ngón tay</span>\r\n            <Select\r\n              styles={customStyle}\r\n              options={listFingerOpening.map((_value) => ({\r\n                value: _value.idFingerOpening,\r\n                label: _value.nameFingerOpening,\r\n              }))}\r\n              value={selectedFingerOpening}\r\n              onChange={(v) => {\r\n                setSelectedFingerOpening(v);\r\n              }}\r\n            />\r\n          </div>\r\n\r\n          <div className=\"selectContainer\">\r\n            <span>Hình dạng ngón tay</span>\r\n            <Select\r\n              styles={customStyle}\r\n              options={listFingerShape.map((_value) => ({\r\n                value: _value.idFingerShape,\r\n                label: _value.nameFingerShape,\r\n              }))}\r\n              value={selectedFingerShape}\r\n              onChange={(v) => {\r\n                setSelectedFingerShape(v);\r\n              }}\r\n            />\r\n          </div>\r\n\r\n          <div className=\"selectContainer\">\r\n            <span>Độ dịch chuyển của tay</span>\r\n            <Select\r\n              styles={customStyle}\r\n              options={listHandMovement.map((_value) => ({\r\n                value: _value.idHandMovement,\r\n                label: _value.nameHandMovement,\r\n              }))}\r\n              value={selectedHandMovement}\r\n              onChange={(v) => {\r\n                setSelectedHandMovement(v);\r\n              }}\r\n            />\r\n          </div>\r\n          {errorNotSelectAll ? (\r\n            <div className=\"error_message\">Error</div>\r\n          ) : (\r\n            <></>\r\n          )}\r\n\r\n          <button\r\n            className=\"submitBtn\"\r\n            onClick={() => {\r\n              // if (\r\n              //   !selectedDirectionOfPalmAndFinger ||\r\n              //   !selectedFingerOpening ||\r\n              //   !selectedFingerShape ||\r\n              //   !selectedHandMovement ||\r\n              //   !selectedHandShape\r\n              // ) {\r\n              //   setErrorNotSelectAll(true);\r\n              // } else {\r\n              dispatch({\r\n                type: ACTIONS.DETECT_HAND_START,\r\n                data: {\r\n                  directionOfPalmAndFinger:\r\n                    selectedDirectionOfPalmAndFinger.value,\r\n                  fingerOpening: selectedFingerOpening.value,\r\n                  fingerShape: selectedFingerShape.value,\r\n                  handMovement: selectedHandMovement.value,\r\n                  handShape: selectedHandShape.value,\r\n                  // directionOfPalmAndFinger: 1,\r\n                  // fingerOpening: 11,\r\n                  // fingerShape: 10,\r\n                  // handMovement: 3,\r\n                  // handShape: 1,\r\n                },\r\n              });\r\n              setErrorNotSelectAll(false);\r\n              // }\r\n            }}\r\n          >\r\n            Check\r\n          </button>\r\n        </div>\r\n      </div>\r\n      <Modal\r\n        isShow={isShowModal}\r\n        setIsShow={setIsShowModal}\r\n        onClose={handleCloseModal}\r\n      >\r\n        <div className=\"modalContainer\">\r\n          <div style={{ textAlign: \"right\" }}>\r\n            <SVGIcon\r\n              name=\"close\"\r\n              width={18}\r\n              width={18}\r\n              onClick={handleCloseModal}\r\n              style={{ cursor: \"pointer\" }}\r\n            />\r\n          </div>\r\n          <div className=\"modal-header\">\r\n            <h2 className=\"header\">Chữ cái bạn mô tả là</h2>\r\n            <div className=\"closeBtn\" onClick={handleCloseModal}></div>\r\n          </div>\r\n          <div className=\"modal-content\">\r\n            <h1>\r\n              <span style={{ fontWeight: \"unset\" }}>Chữ </span>\r\n              <strong className=\"result\">\r\n                {returnResult?.case?.case?.caseNameResult ||\r\n                  returnResult?.case?.caseNameResult}\r\n              </strong>\r\n            </h1>\r\n            <p style={{marginTop:5}}>{returnResult?.message}</p>\r\n          </div>\r\n        </div>\r\n      </Modal>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default DetectHand;\r\n"],"sourceRoot":""}